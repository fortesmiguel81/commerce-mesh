name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '18.x'
  JAVA_VERSION: '17'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and Test .NET Services
  dotnet-build-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore CommerceMesh.sln

    - name: Build solution
      run: dotnet build CommerceMesh.sln --no-restore --configuration Release

    - name: Run unit tests
      run: dotnet test tests/**/*.csproj --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-dotnet
        path: |
          **/TestResults/**/*.xml
          **/TestResults/**/*.trx

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage/reports/
        fail_ci_if_error: false

  # Job 2: Build Java Payment Service (when it exists)
  java-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check if Java service exists
      id: check-java
      run: |
        if [ -d "src/Services/PaymentService.Java" ] && [ -f "src/Services/PaymentService.Java/pom.xml" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up JDK
      if: steps.check-java.outputs.exists == 'true'
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      if: steps.check-java.outputs.exists == 'true'
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      if: steps.check-java.outputs.exists == 'true'
      run: |
        cd src/Services/PaymentService.Java
        mvn clean compile test package

    - name: Upload Java artifacts
      if: steps.check-java.outputs.exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: java-artifacts
        path: src/Services/PaymentService.Java/target/*.jar

  # Job 3: Build Node.js Notification Service (when it exists)
  nodejs-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check if Node.js service exists
      id: check-nodejs
      run: |
        if [ -d "src/Services/NotificationService.Node" ] && [ -f "src/Services/NotificationService.Node/package.json" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Setup Node.js
      if: steps.check-nodejs.outputs.exists == 'true'
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/Services/NotificationService.Node/package-lock.json

    - name: Install dependencies
      if: steps.check-nodejs.outputs.exists == 'true'
      run: |
        cd src/Services/NotificationService.Node
        npm ci

    - name: Run tests
      if: steps.check-nodejs.outputs.exists == 'true'
      run: |
        cd src/Services/NotificationService.Node
        npm test

    - name: Build
      if: steps.check-nodejs.outputs.exists == 'true'
      run: |
        cd src/Services/NotificationService.Node
        npm run build

  # Job 4: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [dotnet-build-test]

    steps:
    - uses: actions/checkout@v4

    - name: Run .NET Security Scan
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee security-scan.log
        ! grep -q "has the following vulnerable packages" security-scan.log

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 5: Generate Aspire Manifests
  aspire-manifests:
    runs-on: ubuntu-latest
    needs: [dotnet-build-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore CommerceMesh.sln

    - name: Generate Aspire manifests
      run: |
        cd src/AppHost
        dotnet run --project AppHost.csproj -- --publisher manifest --output-path ../../manifests

    - name: Upload Aspire manifests
      uses: actions/upload-artifact@v4
      with:
        name: aspire-manifests
        path: manifests/

  # Job 6: Build and Push Container Images
  build-images:
    runs-on: ubuntu-latest
    needs: [dotnet-build-test, java-build, nodejs-build]
    if: always() && (needs.dotnet-build-test.result == 'success') && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service:
          - name: order-service-api
            context: .
            dockerfile: src/Services/OrderService/OrderService.Api/Dockerfile
            condition: always()
          - name: payment-service
            context: src/Services/PaymentService.Java
            dockerfile: src/Services/PaymentService.Java/Dockerfile
            condition: needs.java-build.result == 'success'
          - name: notification-service
            context: src/Services/NotificationService.Node
            dockerfile: src/Services/NotificationService.Node/Dockerfile
            condition: needs.nodejs-build.result == 'success'

    steps:
    - uses: actions/checkout@v4

    - name: Check if Dockerfile exists
      id: dockerfile-check
      run: |
        if [ -f "${{ matrix.service.dockerfile }}" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Docker Buildx
      if: steps.dockerfile-check.outputs.exists == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: steps.dockerfile-check.outputs.exists == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      if: steps.dockerfile-check.outputs.exists == 'true'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      if: steps.dockerfile-check.outputs.exists == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 7: Deploy to Staging (Azure Container Apps)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [aspire-manifests, build-images]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Download Aspire manifests
      uses: actions/download-artifact@v4
      with:
        name: aspire-manifests
        path: manifests/

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Apps
      run: |
        # Install Azure Container Apps extension
        az extension add --name containerapp --upgrade
        
        # Deploy using Aspire-generated manifests
        az containerapp env create \
          --name commercemesh-staging \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --location ${{ secrets.AZURE_REGION }}
        
        # Apply manifests (this will be enhanced based on Aspire manifest format)
        echo "Deploying services using Aspire manifests..."
        # Additional deployment commands will be added based on manifest structure

  # Job 8: Integration Tests (Post-Deployment)
  integration-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run integration tests
      run: |
        cd tests/IntegrationTests
        dotnet test --configuration Release --verbosity normal
      env:
        TEST_ENVIRONMENT_URL: ${{ secrets.STAGING_URL }}

  # Job 9: Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Download Aspire manifests
      uses: actions/download-artifact@v4
      with:
        name: aspire-manifests
        path: manifests/

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    - name: Deploy to Production Azure Container Apps
      run: |
        az extension add --name containerapp --upgrade
        
        az containerapp env create \
          --name commercemesh-production \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} \
          --location ${{ secrets.AZURE_REGION }}
        
        echo "Deploying to production using Aspire manifests..."
        # Production deployment commands
